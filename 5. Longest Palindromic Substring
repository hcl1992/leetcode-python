"""
Given a string S, find the longest palindromic substring in S. 
You may assume that the maximum length of S is 1000, and there exists one unique longest palindromic substring.
"""
# longest substring: time limit exceed
#class Solution(object):
#    def longestPalindrome(self, s):
#        """
#        :type s: str
#        :rtype: str
#        """
#        if len(s)==0:
#            return 
#        if len(s)==1:
#            return s
#        n=len(s)
#        l=n
#        count=0
#        while n>=1:
#            for i in range(0,l-n+1):
#                s1=s[i:i+n] #we start from the longest substring 
#                s2=s1[::-1]
#                if s1==s2: # check whether a substring equals its reverse, if so, that is the answer
#                    return s1
#                    break
#            n=n-1
ï¼ƒ manacher algorithm
class Solution(object):
    def longestPalindrome(self, s):
        """
        :type s: str
        :rtype: str
        """
        t = '#' + '#'.join(s) + '#'
        n = len(t)
        RL = [0] * n
        ans = ""
        maxLen = 0
        maxRight = 0
        pos = 0
        for i in range(n):
            RL[i] = min(maxRight - i, RL[pos*2-i]) if i < maxRight else 1
            while i >= RL[i] and i+RL[i] < len(t) and t[i+RL[i]] == t[i-RL[i]]:
                RL[i] += 1
            if i + RL[i]-1 > maxRight:
                maxRight = i + RL[i] - 1
                pos = i
            if RL[i] > maxLen:
                maxLen = RL[i]
                ans = s[(i + 1 - maxLen)/2: (i - 1 + maxLen)/2]
        return ans
